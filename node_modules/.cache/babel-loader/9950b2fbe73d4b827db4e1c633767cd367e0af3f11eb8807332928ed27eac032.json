{"ast":null,"code":"var _jsxFileName = \"/Users/adammenz/Developer/chords/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const types = [\"\", \"m\", \"aug\", \"dim\", \"7\", \"major 7th\", \"m–77\", \"ø7\", \"o7\"];\n  const notes = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n  const modifiers = [\"\", \"#\", \"♭\"];\n  const randomElementFrom = arr => {\n    return arr[Math.floor(Math.random() * arr.length)];\n  };\n  const [type, setType] = useState(randomElementFrom(types));\n  const [note, setNote] = useState(randomElementFrom(notes));\n  const [modifier, setModifier] = useState(randomElementFrom(modifiers));\n  const generateNote = () => {\n    setNote(randomElementFrom(notes));\n    setType(randomElementFrom(types));\n    setModifier(randomElementFrom(modifiers));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [note, \" \", modifier, \" \", type]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: generateNote,\n      children: \"New chord\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"UmMTM86VTIZktJvcCWKEBRkZwmI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","App","types","notes","modifiers","randomElementFrom","arr","Math","floor","random","length","type","setType","note","setNote","modifier","setModifier","generateNote"],"sources":["/Users/adammenz/Developer/chords/src/App.js"],"sourcesContent":["import { useState } from \"react\";\n\nfunction App() {\n  const types = [\"\", \"m\", \"aug\", \"dim\", \"7\", \"major 7th\", \"m–77\", \"ø7\", \"o7\"];\n  const notes = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\n  const modifiers = [\"\", \"#\", \"♭\"];\n\n  const randomElementFrom = (arr) => {\n    return arr[Math.floor(Math.random() * arr.length)];\n  };\n\n  const [type, setType] = useState(randomElementFrom(types));\n  const [note, setNote] = useState(randomElementFrom(notes));\n  const [modifier, setModifier] = useState(randomElementFrom(modifiers));\n\n  const generateNote = () => {\n    setNote(randomElementFrom(notes));\n    setType(randomElementFrom(types));\n    setModifier(randomElementFrom(modifiers));\n  };\n\n  return (\n    <div>\n      <div>\n        {note} {modifier} {type}\n      </div>\n      <button onClick={generateNote}>New chord</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAAC;AAEjC,SAASC,GAAG,GAAG;EAAA;EACb,MAAMC,KAAK,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC;EAC3E,MAAMC,KAAK,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EACjD,MAAMC,SAAS,GAAG,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,CAAC;EAEhC,MAAMC,iBAAiB,GAAIC,GAAG,IAAK;IACjC,OAAOA,GAAG,CAACC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGH,GAAG,CAACI,MAAM,CAAC,CAAC;EACpD,CAAC;EAED,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGZ,QAAQ,CAACK,iBAAiB,CAACH,KAAK,CAAC,CAAC;EAC1D,MAAM,CAACW,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAACK,iBAAiB,CAACF,KAAK,CAAC,CAAC;EAC1D,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAACK,iBAAiB,CAACD,SAAS,CAAC,CAAC;EAEtE,MAAMa,YAAY,GAAG,MAAM;IACzBH,OAAO,CAACT,iBAAiB,CAACF,KAAK,CAAC,CAAC;IACjCS,OAAO,CAACP,iBAAiB,CAACH,KAAK,CAAC,CAAC;IACjCc,WAAW,CAACX,iBAAiB,CAACD,SAAS,CAAC,CAAC;EAC3C,CAAC;EAED,oBACE;IAAA,wBACE;MAAA,WACGS,IAAI,OAAGE,QAAQ,OAAGJ,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QACnB,eACN;MAAQ,OAAO,EAAEM,YAAa;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB;EAAA;IAAA;IAAA;IAAA;EAAA,QAC7C;AAEV;AAAC,GA3BQhB,GAAG;AAAA,KAAHA,GAAG;AA6BZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
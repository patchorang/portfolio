[{"/Users/adammenz/Developer/chords/src/index.js":"1","/Users/adammenz/Developer/chords/src/App.js":"2","/Users/adammenz/Developer/chords/src/components/Toggle.js":"3","/Users/adammenz/Developer/chords/src/components/Slider.js":"4"},{"size":205,"mtime":1671271651070,"results":"5","hashOfConfig":"6"},{"size":3289,"mtime":1671279163859,"results":"7","hashOfConfig":"6"},{"size":890,"mtime":1671278497611,"results":"8","hashOfConfig":"6"},{"size":555,"mtime":1671276368804,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10bt3z9",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adammenz/Developer/chords/src/index.js",[],[],"/Users/adammenz/Developer/chords/src/App.js",["23","24"],[],"import { useState, useEffect } from \"react\";\nimport Toggle from \"./components/Toggle\";\nimport Slider from \"./components/Slider\";\n\nconst TYPES = [\"\", \"-\", \"aug\", \"dim\", \"⁷\", \"maj⁷\", \"-⁷\", \"ø⁷\", \"o⁷\"];\nconst TYPES_HUMAN_READABLE = {\n  \"\": \"Major\",\n  \"-\": \"Minor\",\n  aug: \"Augmented\",\n  dim: \"Diminished\",\n  \"⁷\": \"Dominant 7th\",\n  \"maj⁷\": \"Major 7th\",\n  \"-⁷\": \"Minor 7th\",\n  \"ø⁷\": \"Half diminished 7th\",\n  \"o⁷\": \"Diminished 7th\",\n};\nconst NOTES = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"];\nconst MODIFIERS = [\"\", \"♯\", \"♭\"];\n\nfunction App() {\n  const randomElementFrom = (arr) => {\n    return arr[Math.floor(Math.random() * arr.length)];\n  };\n\n  const [currentTypes, setCurrentTypes] = useState(\n    TYPES.reduce((acc, curr) => ((acc[curr] = true), acc), {})\n  );\n\n  const [type, setType] = useState(randomElementFrom(TYPES));\n  const [note, setNote] = useState(randomElementFrom(NOTES));\n  const [modifier, setModifier] = useState(randomElementFrom(MODIFIERS));\n  const [intervalTime, setIntervalTime] = useState(2000);\n  const [autoChange, setAutoChange] = useState(true);\n\n  useEffect(() => {\n    if (autoChange) {\n      const interval = setInterval(() => {\n        generateNote();\n      }, intervalTime);\n      return () => clearInterval(interval);\n    }\n  }, [intervalTime, autoChange, currentTypes]);\n\n  const generateNote = () => {\n    const keys = Object.keys(currentTypes);\n    const filteredTypes = keys.filter((key) => {\n      return currentTypes[key];\n    });\n    setNote(randomElementFrom(NOTES));\n    setType(randomElementFrom(filteredTypes));\n    setModifier(randomElementFrom(MODIFIERS));\n  };\n\n  const setIntervalSpeed = (speed) => {\n    setIntervalTime(speed);\n  };\n\n  return (\n    <div className=\"container m-auto grid max-w-2xl w-full\">\n      <div className=\"bg-slate-50 p-8 my-4 rounded-md\">\n        <div className=\"container w-full pb-8\">\n          <span className=\"text-5xl mb-4\">\n            {note}\n            {modifier} {type}\n          </span>\n          <Toggle\n            className=\"float-right mt-4\"\n            handleToggle={() => setAutoChange(!autoChange)}\n            isOn={autoChange}\n          >\n            Use timer\n          </Toggle>\n        </div>\n\n        {autoChange ? (\n          <Slider\n            currentInterval={intervalTime}\n            onChangeSpeed={(event) => setIntervalSpeed(event.target.value)}\n          ></Slider>\n        ) : (\n          <button\n            className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded\"\n            onClick={generateNote}\n          >\n            Next chord\n          </button>\n        )}\n\n        <div className=\"pt-8\">\n          <div className=\"container m-auto grid grid-cols-2 pt-2\">\n            {TYPES.map((type) => {\n              return (\n                <Toggle\n                  key={type}\n                  isOn={currentTypes[type]}\n                  handleToggle={() => {\n                    setCurrentTypes({\n                      ...currentTypes,\n                      [type]: !currentTypes[type],\n                    });\n                  }}\n                >\n                  {TYPES_HUMAN_READABLE[type]}\n                </Toggle>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/adammenz/Developer/chords/src/components/Toggle.js",[],[],"/Users/adammenz/Developer/chords/src/components/Slider.js",[],[],{"ruleId":"25","severity":1,"message":"26","line":26,"column":52,"nodeType":"27","messageId":"28","endLine":26,"endColumn":53},{"ruleId":"29","severity":1,"message":"30","line":42,"column":6,"nodeType":"31","endLine":42,"endColumn":46,"suggestions":"32"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'generateNote'. Either include it or remove the dependency array.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [intervalTime, autoChange, currentTypes, generateNote]",{"range":"36","text":"37"},[1254,1294],"[intervalTime, autoChange, currentTypes, generateNote]"]